//Auto-generated by RSP Compiler
//Source: sandbox.rsp.html
part of trails;

/** Template, sandbox, for rendering the view. */
Future sandbox(HttpConnect connect) { //#2
  var _t0_, _cs_ = new List<HttpConnect>();
  HttpRequest request = connect.request;
  HttpResponse response = connect.response;
  if (!Rsp.init(connect, "text/html; charset=utf-8"))
    return new Future.value();

  response.write("""<!DOCTYPE html>
<html>
 <head>
     <title>La Boussole - tests</title>
"""); //#2

  return connect.include("/rsp/templates/assetsimports.html").then((_) { //include#6

    response.write("""  </head>
  <body>   
"""); //#7

    var _0 = new StringBuffer(); _cs_.add(connect); //var#10
    connect = new HttpConnect.stringBuffer(connect, _0); response = connect.response;

    response.write("""           <h1>Test</h1>
           
              <button id="btn-search" type="submit" class="btn btn-primary ">Recherche</button>&nbsp;
              <button id="btn-reset"  type="submit" class="btn btn-warning ">Supprime markers</button>
           
"""); //#11

    connect = _cs_.removeLast(); response = connect.response;

    var _1 = new StringBuffer(); _cs_.add(connect); //var#17
    connect = new HttpConnect.stringBuffer(connect, _1); response = connect.response;

    connect = _cs_.removeLast(); response = connect.response;

    var _2 = new StringBuffer(); _cs_.add(connect); //var#18
    connect = new HttpConnect.stringBuffer(connect, _2); response = connect.response;

    connect = _cs_.removeLast(); response = connect.response;

    var _3 = new StringBuffer(); _cs_.add(connect); //var#19
    connect = new HttpConnect.stringBuffer(connect, _3); response = connect.response;

    response.write("""         <div id="map"  style="height: 500px; width: 500px"></div>
         <script type="text/javascript">


         var markers = {};
         var ignKey     = "gnst6zrvh2tnhhulo1kovnh1" ;
         var googleKey  = "AIzaSyACqUcoVGLVERGKxv09yqg9jv1iykUDJjA" ;
         
   		 var OSM			= L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png');
            // , {attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a>'}
  		 var ignWmtsUrl	= "http://gpp3-wxs.ign.fr/"+ ignKey + "/geoportail/wmts?LAYER=GEOGRAPHICALGRIDSYSTEMS.MAPS&EXCEPTIONS=text/xml&FORMAT=image/jpeg&SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetTile&STYLE=normal&TILEMATRIXSET=PM&&TILEMATRIX={z}&TILECOL={x}&TILEROW={y}" ;
  		 var IGN			= L.tileLayer(ignWmtsUrl);
           // , {attribution: '&copy; <a href="http://www.ign.fr/">IGN</a>'}
  		 var scanWmtsUrl	= "http://gpp3-wxs.ign.fr/"+ ignKey + "/geoportail/wmts?LAYER=GEOGRAPHICALGRIDSYSTEMS.MAPS.SCAN-EXPRESS.STANDARD&EXCEPTIONS=text/xml&FORMAT=image/jpeg&SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetTile&STYLE=normal&TILEMATRIXSET=PM&&TILEMATRIX={z}&TILECOL={x}&TILEROW={y}" ;
  		 var SCAN25		= L.tileLayer(scanWmtsUrl);
           // , {attribution: '&copy; <a href="http://www.ign.fr/">IGN</a>'}
           
  		 var GMS = new L.Google('SATELLITE');

    	 var baseMap = {"Ign Topo":IGN,"Ign Topo Express":SCAN25 ,"OpenStreetMap":OSM, "Google Satellite": GMS};

       var map = L.map('map', {
         zoomControl: false,
         layers: [IGN]
       });

       var zoomControl = L.control.zoom({
         position: 'bottomleft'
       });
       map.addControl(zoomControl);
    	 
     	 L.control.layers(baseMap).addTo(map);

     	 
     	 
     	 
     	 map.on('moveend', onMapChange);
     	 
     	var myIcon = L.icon({
        	iconUrl:   'assets/lib/leaflet/images/marker-icon.png',
        	shadowUrl: 'assets/lib/leaflet/images/marker-shadow.png'
     	});
     	 
     	 
       function onMapChange(e){
         var bounds = map.getBounds();
         //console.log("onMapChange : NW ",bounds.getNorthWest() );
         //console.log("onMapChange : NE ",bounds.getNorthEast() );
         //console.log("onMapChange : SW ",bounds.getSouthWest() );
         //console.log("onMapChange : SE ",bounds.getSouthEast() );
       }
     	 
     	 
         function addMarker(targetMap,  key,  title, lat, long ){
           if(key in markers){
             markers[key].setOpacity(1) ;
           }else{
             var marker = L.marker([lat, long], {icon: myIcon}) ;
             markers[key] = marker ;
             marker.addTo(map).bindPopup("<b>"+title+"</b>").openPopup();
           }
         }
         
         function addMarkerToMap( key,  title, lat, long ){
           addMarker(map,  key,  title, lat, long ) ;
         } 
         
         function removeAllMarkers(){
           for (var key in markers) {
             markers[key].setOpacity(0) ;
           }
         }
         
         function fitMapViewPortWithMarkers(){
             var bounds = new L.LatLngBounds ();
             var hasMarkers = false ;
             for (var key in markers) {
               marker = markers[key];
               hasMarkers = true ;
               bounds.extend (marker.getLatLng());
             }  
             if (hasMarkers){
               map.fitBounds (bounds);
               if (map.getZoom() > 12){
                 map.setZoom(12);
               }
             }
         }
         
         
  /*       var map = new GxMapHandler() ;
         map.ignKey = "gnst6zrvh2tnhhulo1kovnh1" ;
         map.googleKey = "AIzaSyACqUcoVGLVERGKxv09yqg9jv1iykUDJjA";
         map.init('search-results-map-canvas') ;

         start = map.addMarker({lat:47.050282000000, lng: 5.752311000000});
    */     
         
         
         </script>
"""); //#20

    connect = _cs_.removeLast(); response = connect.response;

    return Rsp.nnf(spaces(new HttpConnect.chain(connect), nw: _0.toString(), ne: _1.toString(), sw: _2.toString(), se: _3.toString())).then((_) { //include#9

      return Rsp.nnf(sharedWidgets(new HttpConnect.chain(connect), sharedWidgetsId: "sharedWidgets")).then((_) { //include#122

        response.write("""    <script type="application/dart" src="/client/pages/sandbox.dart"></script>
    <script src="/packages/browser/dart.js"></script>
  </body>
</html>
"""); //#123

        return new Future.value();
      }); //end-of-include
    }); //end-of-include
  }); //end-of-include
}
