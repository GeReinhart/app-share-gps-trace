//Auto-generated by RSP Compiler
//Source: traceAnalysisView.rsp.html
part of trails;

/** Template, traceAnalysisView, for rendering the view. */
Future traceAnalysisView(HttpConnect connect, {trace}) { //#2
  var _t0_, _cs_ = new List<HttpConnect>();
  HttpRequest request = connect.request;
  HttpResponse response = connect.response;
  Rsp.init(connect, "text/html; charset=utf-8");

  response.write("""<!DOCTYPE html>
<html>
 <head>
	 <title>La Boussole - Analyse de trace</title>
"""); //#2

  return connect.include("/rsp/templates/assetsimports.html").then((_) { //include#6

    response.write("""  </head>
  <body>   
"""); //#7

    var _0 = new StringBuffer(); _cs_.add(connect); //var#10
    connect = new HttpConnect.stringBuffer(connect, _0); response = connect.response;

    response.write("""        <h1>Analyse d'une trace gpx</h1>

        <form role="form"  action="/trace.analysis" method="get" accept-charset="UTF-8">
          <div class="form-group">
            <input name="gpxFileUrl" type="text" class="form-control" id="gpxFileUrl" placeholder="Url du fichier gpx">
          </div>
          <button type="submit" class="btn btn-default">Analyser</button>
        </form>


"""); //#11

    connect = _cs_.removeLast(); response = connect.response;

    var _1 = new StringBuffer(); _cs_.add(connect); //var#22
    connect = new HttpConnect.stringBuffer(connect, _1); response = connect.response;

    response.write("""         <div id="visualization" ></div> 
"""); //#23

    connect = _cs_.removeLast(); response = connect.response;

    var _2 = new StringBuffer(); _cs_.add(connect); //var#25
    connect = new HttpConnect.stringBuffer(connect, _2); response = connect.response;

    connect = _cs_.removeLast(); response = connect.response;

    var _3 = new StringBuffer(); _cs_.add(connect); //var#26
    connect = new HttpConnect.stringBuffer(connect, _3); response = connect.response;

    response.write("""         
"""); //#27

    if (trace != null) { //if#28

      response.write("""           <h2>Statistics</h2>
           <div>"""); //#29

      response.write(Rsp.nnx((trace.length/1000).truncate())); //#30


      response.write(""" km """); //#30

      response.write(Rsp.nnx(trace.length- (trace.length/1000).truncate()*1000)); //#30


      response.write(""" m de distance</div>

           <div>"""); //#30

      response.write(Rsp.nnx(trace.up)); //#32


      response.write(""" mètres de dénivelé positif</div>

           <div>"""); //#32

      response.write(Rsp.nnx(trace.inclinationUp)); //#34


      response.write(""" % d'inclinaison moyenne en monté</div>

           <div>"""); //#34

      response.write(Rsp.nnx(trace.difficulty)); //#36


      response.write(""" points de difficulté</div>

"""); //#36
    } //if

    response.write("""         
"""); //#39

    connect = _cs_.removeLast(); response = connect.response;

    return Rsp.nnf(spaces(new HttpConnect.chain(connect), nw: _0.toString(), ne: _1.toString(), sw: _2.toString(), se: _3.toString())).then((_) { //include#9

      response.write("""    
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script type="application/dart" src="client/traceAnalysis.dart"></script>
    <script src="packages/browser/dart.js"></script>
    <script src="packages/browser/interop.js"></script>
  </body>
</html>"""); //#42

      return Rsp.nnf();
    }); //end-of-include
  }); //end-of-include
}
